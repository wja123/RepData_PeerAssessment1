naset
sum(naset)
na_repset<-dfile[naset]
na_repset<-dfile[naset,]
View(na_repset)
merge(x=na_repset,y=mean_interval,by = "interval",all.x = T)
mean_interval<-summarize(k,steps=mean(steps,na.rm = T))
plot(mean_interval$steps~mean_interval$interval,type="l",xlab="5 Minute Interval",ylab = "Average Steps")
max_interval<-mean_interval$interval[which.max(dfile2$steps)]
naset<-is.na(dfile$steps)
num_missing<-sum(naset)
na_repset<-dfile[naset,]
merge(x=na_repset,y=mean_interval,by = "interval",all.x = T)
na_repset2<-merge(x=na_repset,y=mean_interval,by = "interval",all.x = T)
View(na_repset2)
View(na_repset2)
na_repset2$steps<-na_repset2$steps.y
View(dfile)
narepset3<-cbind(narepset3$steps,narepset3$date,narepset3$interval)
narepset3<-cbind(narepset2$steps,narepset2$date,narepset2$interval)
na_repset3<-cbind(na_repset2$steps,na_repset2$date,na_repset2$interval)
View(na_repset3)
View(dfile)
View(na_repset2)
na_repset2<-na_repset2[,c(1,2,4)]
View(na_repset2)
na_repset2<-merge(x=na_repset,y=mean_interval,by = "interval",all.x = T)
na_repset2$steps<-na_repset2$steps.y
View(na_repset2)
na_repset2<-na_repset2[,c(1,3,5)]
View(na_repset2)
View(na_repset2)
View(na_repset)
na_repset2<-na_repset2[,c(5,3,1)]
View(na_repset2)
View(na_repset2)
View(na_repset3)
View(na_repset2)
View(na_repset)
View(na_repset2)
View(na_repset)
na_repset2<-na_repset2[,c(5,3,1)]
na_repset2<-merge(x=na_repset,y=mean_interval,by = "interval",all.x = T)
na_repset2$steps<-na_repset2$steps.y
na_repset2<-na_repset2[,c(5,3,1)]
View(na_repset2)
View(na_repset)
View(na_repset2)
na_freeset<-dfile[!naset,]
View(na_freeset)
rep_set<-rbind(na_freeset,na_repset2)
View(rep_set)
filled_set<-rbind(na_freeset,na_repset2)
source('~/Reproducible Research/ReProdRes-Assignment1 - v2.R', echo=TRUE)
max_interval<-mean_interval$interval[which.max(mean_interval$steps)]
naset<-is.na(dfile$steps)
num_missing<-sum(naset)
na_repset<-dfile[naset,]
na_freeset<-dfile[!naset,]
na_repset2<-merge(x=na_repset,y=mean_interval,by = "interval",all.x = T)
na_repset2$steps<-na_repset2$steps.y
na_repset2<-na_repset2[,c(5,3,1)]
filled_set<-rbind(na_freeset,na_repset2)
hist(filled_set$steps)
hist(total_by_day$steps)
filled_set<-rbind(na_freeset,na_repset2)
hist(filled_set$steps)
total_steps_by_day <-sum(total_by_day$steps)
total_steps_by_day <-sum(total_by_day$steps)
filled_tot_steps_by_day <-sum(filled_set$steps)
total_steps_by_day
filled_tot_steps_by_day
View(filled_set)
total_by_day<-summarize(group_by_day_data,steps=sum(steps,na.rm = T))
group_by_day_data<-group_by(dfile,date)
total_by_day<-summarize(group_by_day_data,steps=sum(steps,na.rm = T))
View(total_by_day)
hist(dfile$steps)
hist(total_steps_by_day$steps)
hist(total_by_day$steps)
filledgroupbyday<-group_by(filled_set,date)
filled_total_by_day<-summarize(filledgroupbyday,steps=sum(steps,na.rm = T))
hist(filled_total_by_day$steps)
hist(total_by_day$steps)
hist(filled_total_by_day$steps)
mean_by_day<-mean(total_by_day$steps)
median_by_day<-median(total_by_day$steps)
filled_mean<-mean(filled_set$steps)
filled_median<-median(filled_set$steps)
filled_mean<-mean(filled_total_by_day$steps)
filled_median<-median(filled_total_by_day$steps)
filled_median<-median(filled_total_by_day$steps)
filled_mean<-mean(filled_total_by_day$steps)
filled_median<-median(filled_total_by_day$steps)
filled_set$weekday<-weekdays(filled_set$date,abbreviate)
filled_set$weekday<-weekdays(as.date(filled_set$date),abbreviate)
filled_set$weekday<-weekdays(as.Date(filled_set$date),abbreviate)
filled_set$weekday<-lapply(filled_set$date,weekdays)
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
View(filled_set)
filled_set$weekday<-if(filled_set$weekday %in% c("Saturday","Sunday"){"Weekend" else "Weekday"})
filled_set$weekday<-if(filled_set$weekday %in% c("Saturday","Sunday")){"Weekend" else "Weekday"}
filled_set$weekday<-if(filled_set$weekday %in% c("Saturday","Sunday")){"Weekend"} else {"Weekday"}
View(filled_set)
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday2<-if(filled_set$weekday %in% c("Saturday","Sunday")){"Weekend"} else {"Weekday"}
View(filled_set)
filled_set$weekday2<-if(filled_set$weekday == "Saturday" || filled_set$weekday =="Sunday")){"Weekend"} else {"Weekday"}
filled_set$weekday2<-if(filled_set$weekday == "Saturday" || filled_set$weekday =="Sunday"){"Weekend"} else {"Weekday"}
View(filled_set)
filled_set$weekday2<-if(filled_set$weekday == 'Saturday' || filled_set$weekday =='Sunday'){"Weekend"} else {"Weekday"}
View(filled_set)
filled_set$weekday2<-if(filled_set$weekday == as.Date('Saturday') || filled_set$weekday ==as.Date('Sunday'){"Weekend"} else {"Weekday"}
filled_set$weekday2<-if(filled_set$weekday == as.Date('Saturday') || filled_set$weekday ==as.Date('Sunday')){"Weekend"} else {"Weekday"}
View(filled_set)
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday2<-if(filled_set$weekday == weekdays('Saturday') || filled_set$weekday ==weekdays('Sunday')){"Weekend"} else {"Weekday"}
filled_set$weekday[c('Saturday','Sunday'),]<-"Weekend"
filled_set$weekday[weekday=c('Saturday','Sunday'),]<-"Weekend"
filled_set$weekday[filled_set$weekday=c('Saturday','Sunday'),]<-"Weekend"
filled_set$weekday[filled_set$weekday==c('Saturday','Sunday'),]<-"Weekend"
filled_set$weekday[filled_set$weekday %in% c('Saturday','Sunday'),]<-"Weekend"
filled_set$weekday[c('Saturday','Sunday')]<-"Weekend"
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
View(filled_set)
filled_set$weekday['Saturday']<-"Weekend"
filled_set$weekday<-if(filled_set$weekday=='Saturday'){"Weekend"}
weekend_set<-filled_set$weekday[c("Saturday","Sunday")]
weekend_set<-filled_set$weekday[c("Saturday","Sunday"),]
weekend_set<-filled_set$weekday["Saturday"]
weekend_set<-filled_set$weekday[weekday %in% c("Saturday","Sunday")]
weekend_set<-filled_set$weekday[filled_set$weekday %in% c("Saturday","Sunday")]
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
View(filled_set)
weekend_set<-filled_set$weekday[weekdays(as.date(filled_set$date)) %in% c('Saturday','Sunday')]
weekend_set<-filled_set$weekday[weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday')]
filled_set$weekday2<-filled_set$weekday
filled_set$weekday2[(weekdays(as.Date(date)) %in% c('Saturday','Sunday'))]<-"Weekend"
filled_set$weekday2[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-"Weekend"
View(filled_set)
filled_set$weekday2[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-"Weekday"
View(filled_set)
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-"Weekend"
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-"Weekday"
View(filled_set)
filled_set<-rbind(na_freeset,na_repset2)
filledgroupbyday<-group_by(filled_set,date)
filled_total_by_day<-summarize(filledgroupbyday,steps=sum(steps,na.rm = T))
hist(filled_total_by_day$steps)
total_steps_by_day <-sum(total_by_day$steps)
filled_tot_steps_by_day <-sum(filled_set$steps)
total_steps_by_day
filled_tot_steps_by_day
filled_mean<-mean(filled_total_by_day$steps)
filled_median<-median(filled_total_by_day$steps)
View(filled_set)
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-"Weekend"
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-"Weekday"
View(filled_set)
par(mfrow = c(2,1))
library(ggplot2)
group_by_weekday<-group_by(filled_set,c(weekday,interval))
group_by_weekday<-group_by(filled_set,weekday,interval)
group_by_weekday<-group_by(filled_set,weekday)
View(filled_set)
filled_set<-as.df(filled_set)
filled_set<-as.DF(filled_set)
filled_set<-as.data.frame(filled_set)
View(filled_set)
group_by_weekday<-group_by(filled_set,weekday)
filled_set$weekday<-as.factor(filled_set$weekday)
filled_set$weekday<-as.factor(filled_set$weekday[[]])
filled_set$weekday<-as.factor(filled_set$weekday[])
filled_set$weekday<-as.factor(lapply(as.Date(filled_set$date),weekdays))
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-"Weekend"
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-"Weekday"
filled_set$weekday<-as.factor(filled_set$weekday)
filled_set$weekday[]<-as.factor(filled_set$weekday)
filled_set$weekday<-as.factor(filled_set$weekday[,])
filled_set$weekday<-as.factor(filled_set$weekday[])
filled_set$weekday<-as.factor(filled_set$weekday[[]])
group_by_weekday<-group_by(filled_set,weekday)
filled_set<-as.data.frame(filled_set)
group_by_weekday<-group_by(filled_set,weekday)
filled_set$weekday<-as.factor(lapply(as.Date(filled_set$date),weekdays))
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-"Weekend"
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-"Weekday"
group_by_weekday<-group_by(filled_set,weekday)
filled_set<-as.data.frame(filled_set)
group_by_weekday<-group_by(filled_set,weekday)
filled_set$weekday<-as.factor(lapply(as.Date(filled_set$date),weekdays))
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-as.factor("Weekend")
filled_set$weekday<-as.factor(lapply(as.Date(filled_set$date),weekdays))
filled_set<-rbind(na_freeset,na_repset2)
filled_set$weekday<-as.factor(lapply(as.Date(filled_set$date),weekdays))
filled_set$weekday<-as.data.frame(lapply(as.Date(filled_set$date),weekdays))
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-as.factor("Weekend")
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-as.factor("Weekday")
filled_set<-as.data.frame(filled_set)
group_by_weekday<-group_by(filled_set,weekday)
filled_set$weekday<-as.factor(filled_set$weekday)
filled_set<-rbind(na_freeset,na_repset2)
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<- 'Weekend'
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-'Weekday'
filled_set<-as.data.frame(filled_set)
filled_set$weekday<-as.factor(filled_set$weekday)
filled_set$weekday<-as.factor(unlist(filled_set$weekday)
)
filled_set<-rbind(na_freeset,na_repset2)
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<- 'Weekend'
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-'Weekday'
filled_set$weekday<-as.factor(unlist(filled_set$weekday))
group_by_weekday<-group_by(filled_set,weekday)
group_by_weekday<-group_by(filled_set,weekday)
summ_by_weekend<-summarize(filled_set,steps=average(steps))
summ_by_weekend<-summarize(filled_set,steps=mean(steps))
View(summ_by_weekend)
group_by_weekday<-group_by(filled_set,weekday)
View(group_by_weekday)
summ_by_weekend<-summarize(group_by_weekday,steps=mean(steps))
View(summ_by_weekend)
cols=c("weekday","interval")
group_by_weekday<-group_by(filled_set,cols)
cols<-c("weekday","interval")
group_by_weekday<-group_by(filled_set,cols)
filled_set %.% group_by("weekday","interval") %.% summarise(steps=mean(steps)
)
filled_set %>% group_by("weekday","interval") %>% summarise(steps=mean(steps)
)
View(filled_set)
grp_filled<-group_by(filled_set,interval)
grp_filled2<-group_by(filled_set,weekday)
grp_summ<-summarize(grp_filled2,interval)
source('~/Reproducible Research/ReProdRes-Assignment1 - v2.R', echo=TRUE)
source('~/Reproducible Research/ReProdRes-Assignment1 - v2.R', echo=TRUE)
##Load libraries
library(dplyr)
library(ggplot2)
setwd("~/Reproducible Research")
##Save the URL
zipurl<-"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
##Download the zipfile
fzip<-download.file(zipurl,destfile="./dfile.zip",method="curl")
##Unzipped the file into the current drive
unzip("./dfile.zip", list = FALSE, overwrite = TRUE,
junkpaths = FALSE, exdir = ".", unzip = "internal",
setTimes = FALSE)
#Loading and preprocessing the data
dfile<-read.csv("activity.csv",header = T,na.strings = "NA")
#What is the mean total number of steps taken per day?
##Calculate the total number of steps taken per day
group_by_day_data<-group_by(dfile,date)
total_by_day<-summarize(group_by_day_data,steps=sum(steps,na.rm = T))
total_steps_by_day <-sum(total_by_day$steps)
##Make a histogram of the total number of steps taken each day
hist(total_by_day$steps)
##Calculate and report the mean and median of the total number of steps taken per day
mean_by_day<-mean(total_by_day$steps)
median_by_day<-median(total_by_day$steps)
###The Mean number os steps is `mean_by_day and the median is `r median_by_day
#What is the average daily activity pattern?
##Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and
##the average number of steps taken, averaged across all days (y-axis)
k<-group_by(dfile,interval)
mean_interval<-summarize(k,steps=mean(steps,na.rm = T))
plot(mean_interval$steps~mean_interval$interval,type="l",xlab="5 Minute Interval",ylab = "Average Steps")
##Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
max_interval<-mean_interval$interval[which.max(mean_interval$steps)]
###The 5-,minute interval with the maximum number of steps is max_interval
#Inputting Missing Values
##Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
naset<-is.na(dfile$steps)
num_missing<-sum(naset)
###The number of missing values is num_missing
##Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
###To fill in the missing values, I'll use the mean values for that five minute interval
##Create a new dataset but with the missing data filled in
na_repset<-dfile[naset,]
na_freeset<-dfile[!naset,]
na_repset2<-merge(x=na_repset,y=mean_interval,by = "interval",all.x = T)
na_repset2$steps<-na_repset2$steps.y
na_repset2<-na_repset2[,c(5,3,1)]
filled_set<-rbind(na_freeset,na_repset2)
##Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day.
filledgroupbyday<-group_by(filled_set,date)
filled_total_by_day<-summarize(filledgroupbyday,steps=sum(steps,na.rm = T))
hist(filled_total_by_day$steps)
total_steps_by_day <-sum(total_by_day$steps)
filled_tot_steps_by_day <-sum(filled_set$steps)
total_steps_by_day
filled_tot_steps_by_day
filled_mean<-mean(filled_total_by_day$steps)
filled_median<-median(filled_total_by_day$steps)
##Do these values differ from the estimates from the first part of the assignment?
###Yes, they differ significantly, the original total was total_steps_by_day and the new total is filled_tot_steps_by_day, the original mean was mean_by_day
###and the new one is filled_mean. The original median was median_by_day and the new one is filled_median
##What is the impact of imputing missing data on the estimates of the total daily number of steps?
###It seems that using the average to fill in the missing values has created a more bell-shaped distribution to the frequency of steps by day,
### reducing the skew of the data when looked at on a daily basis (opposed to the aggregate data).
#Are there differences in activity patterns between weekdays and weekends?
##Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<- 'Weekend'
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-'Weekday'
filled_set$weekday<-as.factor(unlist(filled_set$weekday))
##Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across
##all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
grp_filled<-group_by(filled_set,interval)
View(grp_filled)
grp_filled2<-group_by(filled_set,weekday)
View(grp_filled2)
nset<-filled_set %>% group_by("weekday","interval") %>% summarise(steps=mean(steps))
View(nset)
nset<-filled_set %>% group_by("interval","weekday") %>% summarise(steps=mean(steps))
grp_summ<-summarize(grp_filled2,interval)
View(filled_set)
p1 <- ggplot(filled_set,aes=(interval,steps),facet_grid(weekday ~ .)
p1 <- ggplot(filled_set,aes=(interval,steps),facet_grid(weekday ~ .))
p1 <- ggplot(filled_set,aes(interval,steps),facet_grid(weekday ~ .))
print(p1)
p1 <- ggplot(filled_set,aes(interval,steps))
p1+facet_grid(weekday ~ .)
p1 <- ggplot(filled_set,aes(interval,steps))
p1+facet_grid(weekday ~ .)
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<- 'Weekend'
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-'Weekday'
filled_set$weekday<-as.factor(unlist(filled_set$weekday))
p1 <- ggplot(filled_set,aes(interval,steps))
p1+facet_grid(weekday ~ .)
p1 <- ggplot(filled_set,aes(interval,steps)) + facet_grid(weekday ~ .)
print(p1)
p1 <- ggplot(filled_set,aes(interval,steps)) + geom_line()+facet_grid(weekday ~ .)
print(p1)
summ_by_weekend<-summarize(group_by_weekday,steps=mean(steps))
summ_by_weekend<-summarize(fitted_set,steps=mean(steps))
summ_by_weekend<-summarize(fi11ed_set,steps=mean(steps))
summ_by_weekend<-summarize(filled_set,steps=mean(steps))
p1 <- ggplot(filled_set,aes(interval,steps)) + geom_line()+facet_grid(weekday ~ .)
grp_filled2<-group_by(filled_set,weekday)
grp_summ<-summarize(grp_filled2,interval,steps=mean(steps))
grp_summ<-summarize(grp_filled2,interval=interval,steps=mean(steps))
filled_set<-rbind(na_freeset,na_repset2)
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<- 'Weekend'
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-'Weekday'
filled_set$weekday<-as.factor(unlist(filled_set$weekday))
p1 <- ggplot(filled_set,aes(interval,steps)) + geom_line()+facet_grid(weekday ~ .)
print(p1)
with(filled_st, tapply(steps, list(interval, weekday), average))
with(filled_set, tapply(steps, list(interval, weekday), average))
with(filled_set, tapply(steps, list(interval, weekday), mean))
p1 <- ggplot(filled_set,aes(interval,steps)) + geom_line()+facet_grid(weekday ~ .)
print(p1)
p1 <- ggplot(filled_set,aes(interval,mean(steps)) + geom_line()+facet_grid(weekday ~ .)
print(p1)
p1 <- ggplot(filled_set,aes(interval,mean(steps)) + geom_line()+facet_grid(weekday ~ .)
p1 <- ggplot(filled_set,aes(interval,mean(steps))) + geom_line()+facet_grid(weekday ~ .)
print(p1)
with(filled_set, tapply(steps, list(interval, weekday), mean))
p1 <- ggplot(fset2,aes(interval,mean(steps))) + geom_line()+facet_grid(weekday ~ .)
fset2<-with(filled_set, tapply(steps, list(interval, weekday), mean))
filled_set %>%
group_by(interval,weekday) %>%
summarise_each(funs(mean))
fset2<-filled_set %>%
group_by(interval,weekday) %>%
summarise_each(funs(mean))
p1 <- ggplot(fset2,aes(interval,mean(steps))) + geom_line()+facet_grid(weekday ~ .)
print(p1)
fset2<-filled_set %>%
group_by(weekday,interval) %>%
summarise_each(funs(mean))
p1 <- ggplot(fset2,aes(interval,mean(steps))) + geom_line()+facet_grid(weekday ~ .)
print(p1)
filled_set<-rbind(na_freeset,na_repset2)
fset2<-filled_set %>%
group_by(weekday,interval) %>%
summarise_each(funs(mean))
fset2<-filled_set %>% group_by(weekday,interval) %>% summarise_each(funs(mean))
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<- 'Weekend'
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-'Weekday'
filled_set$weekday<-as.factor(unlist(filled_set$weekday))
fset2<-filled_set %>% group_by(weekday,interval) %>% summarise_each(funs(mean))
p1 <- ggplot(fset2,aes(interval,mean(steps))) + geom_line()+facet_grid(weekday ~ .)
print(p1)
View(total_by_day)
p1 <- ggplot(fset2,aes(interval,mean(steps))) + geom_line()+facet_grid(weekday ~ .)
filled_set<-rbind(na_freeset,na_repset2)
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<- 'Weekend'
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-'Weekday'
filled_set$weekday<-as.factor(unlist(filled_set$weekday))
p1 <- ggplot(fset2,aes(interval,mean(steps))) + geom_line()+facet_grid(weekday ~ .)
print(p1)
fset2<-with(filled_set, tapply(steps, list(interval, weekday), mean))
p1 <- ggplot(fset2,aes(interval,mean(steps))) + geom_line()+facet_grid(weekday ~ .)
fset2<-as.data.frame(fset2)
View(fset2)
View(fset2)
fset2$interval<-rownames(fset2)
View(fset2)
p1 <- ggplot(fset2,aes(interval)) + geom_line()+facet_grid(weekday ~ .)
print(p1)
fset3<-fset2[,c(1,2,4)]
plot(fset2$interval~fset2$Weekday)
plot(fset2$Weekday~fset2$interval)
plot(fset2$Weekday~fset2$interval,type="l")
plot(fset2$Weekend~fset2$interval,type="l")
par(mfrow=c(2,1))
plot(fset2$Weekday~fset2$interval,type="l")
plot(fset2$Weekend~fset2$interval,type="l")
plot(fset2$Weekend~fset2$interval,type="l",,xlab="Interval",ylab="Average Steps",title("Weekend"))
par(mfrow=c(2,1))
plot(fset2$Weekday~fset2$interval,type="l",xlab="Interval",ylab="Average Steps",title("Weekday"))
plot(fset2$Weekend~fset2$interval,type="l",,xlab="Interval",ylab="Average Steps",title("Weekend"))
plot(fset2$Weekday~fset2$interval,type="l",xlab="Interval",ylab="Average Steps",title("Weekday"))
par(mfrow=c(2,1))
plot(fset2$Weekday~fset2$interval,type="l",xlab="Interval",ylab="Average Steps",title("Weekday"))
par(mfrow=c(2,1))
plot(fset2$Weekday~fset2$interval,type="l",xlab="Interval",ylab="Average Steps",main ="Weekday")
plot(fset2$Weekend~fset2$interval,type="l",,xlab="Interval",ylab="Average Steps",main="Weekend")
plot(fset2$Weekday~fset2$interval,type="l",xlab="Interval",ylab="Average Steps",main ="Weekday")
plot(fset2$Weekend~fset2$interval,type="l",xlab="Interval",ylab="Average Steps",main="Weekend")
setwd("~/Reproducible Research/Peer/RepData_PeerAssessment1")
opts_chunk$set(echo=TRUE,results='show')
##Load libraries
library(dplyr)
library(ggplot2)
##Save the URL
zipurl<-"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
##Download the zipfile
fzip<-download.file(zipurl,destfile="./dfile.zip",method="curl")
##Unzipped the file into the current drive
unzip("./dfile.zip", list = FALSE, overwrite = TRUE,
junkpaths = FALSE, exdir = ".", unzip = "internal",
setTimes = FALSE)
#Loading and preprocessing the data
dfile<-read.csv("activity.csv",header = T,na.strings = "NA")
#What is the mean total number of steps taken per day?
##Calculate the total number of steps taken per day
group_by_day_data<-group_by(dfile,date)
total_by_day<-summarize(group_by_day_data,steps=sum(steps,na.rm = T))
total_steps_by_day <-sum(total_by_day$steps)
##Make a histogram of the total number of steps taken each day
hist(total_by_day$steps)
##Calculate and report the mean and median of the total number of steps taken per day
mean_by_day<-mean(total_by_day$steps)
median_by_day<-median(total_by_day$steps)
###The Mean number os steps is `mean_by_day and the median is `r median_by_day
#What is the average daily activity pattern?
##Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and
##the average number of steps taken, averaged across all days (y-axis)
k<-group_by(dfile,interval)
mean_interval<-summarize(k,steps=mean(steps,na.rm = T))
plot(mean_interval$steps~mean_interval$interval,type="l",xlab="5 Minute Interval",ylab = "Average Steps")
##Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
max_interval<-mean_interval$interval[which.max(mean_interval$steps)]
###The 5-,minute interval with the maximum number of steps is max_interval
#Inputting Missing Values
##Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
naset<-is.na(dfile$steps)
num_missing<-sum(naset)
###The number of missing values is num_missing
##Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
###To fill in the missing values, I'll use the mean values for that five minute interval
##Create a new dataset but with the missing data filled in
na_repset<-dfile[naset,]
na_freeset<-dfile[!naset,]
na_repset2<-merge(x=na_repset,y=mean_interval,by = "interval",all.x = T)
na_repset2$steps<-na_repset2$steps.y
na_repset2<-na_repset2[,c(5,3,1)]
filled_set<-rbind(na_freeset,na_repset2)
##Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day.
filledgroupbyday<-group_by(filled_set,date)
filled_total_by_day<-summarize(filledgroupbyday,steps=sum(steps,na.rm = T))
hist(filled_total_by_day$steps)
total_steps_by_day <-sum(total_by_day$steps)
filled_tot_steps_by_day <-sum(filled_set$steps)
total_steps_by_day
filled_tot_steps_by_day
filled_mean<-mean(filled_total_by_day$steps)
filled_median<-median(filled_total_by_day$steps)
##Do these values differ from the estimates from the first part of the assignment?
###Yes, they differ significantly, the original total was total_steps_by_day and the new total is filled_tot_steps_by_day, the original mean was mean_by_day
###and the new one is filled_mean. The original median was median_by_day and the new one is filled_median
##What is the impact of imputing missing data on the estimates of the total daily number of steps?
###It seems that using the average to fill in the missing values has created a more bell-shaped distribution to the frequency of steps by day,
### reducing the skew of the data when looked at on a daily basis (opposed to the aggregate data).
#Are there differences in activity patterns between weekdays and weekends?
##Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
filled_set$weekday<-lapply(as.Date(filled_set$date),weekdays)
filled_set$weekday[(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<- 'Weekend'
filled_set$weekday[!(weekdays(as.Date(filled_set$date)) %in% c('Saturday','Sunday'))]<-'Weekday'
filled_set$weekday<-as.factor(unlist(filled_set$weekday))
##Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across
##all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
fset2<-with(filled_set, tapply(steps, list(interval, weekday), mean))
fset2<-as.data.frame(fset2)
fset2$interval<-rownames(fset2)
fset3<-fset2[,c(1,2,4)]
fset3<-cbind(fset2[,c(1,2,4)],fset2[,c(1,3,4)])
par(mfrow=c(2,1))
plot(fset2$Weekday~fset2$interval,type="l",xlab="Interval",ylab="Average Steps",main ="Weekday")
plot(fset2$Weekend~fset2$interval,type="l",xlab="Interval",ylab="Average Steps",main="Weekend")
source('~/Reproducible Research/ReProdRes-Assignment1 - v2.R', echo=TRUE)
